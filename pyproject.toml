[build-system]
requires = ["hatchling>=1.25"]
build-backend = "hatchling.build"

[project]
name = "paper-plot"
version = "0.1.0"
description = "Matplotlib styles and utilities for scientific and paper-ready plots (IEEE & GB)."
readme = "README.md"
requires-python = ">=3.10,<3.14"
authors = [
	{ name = "Your Name", email = "you@example.com" }
]
license = { text = "MIT" }
keywords = ["matplotlib", "mplstyle", "plotting", "paper", "IEEE", "GB", "publication"]
classifiers = [
	"Programming Language :: Python :: 3",
	"Programming Language :: Python :: 3 :: Only",
	"Programming Language :: Python :: 3.10",
	"Programming Language :: Python :: 3.11",
	"Programming Language :: Python :: 3.12",
	"Programming Language :: Python :: 3.13",
	"License :: OSI Approved :: MIT License",
	"Operating System :: OS Independent",
	"Topic :: Scientific/Engineering :: Visualization",
]
dependencies = [
	"psutil",
	"numpy >= 1.26.4",
	"py-cpuinfo",
	"matplotlib>=3.5",
	"moviepy >= 2.0.0",
	"opencv-python",
	# future pyrender aux for 3d visualization
	# "pyglet>=1.5", #onscreen graphical windows
	# "freetype-py", #font rendering
	# "PyOpenGL>=3.1.4", # write low-level OpenGL rendering pipeline
	# "numba", #compile low-level OpenGL rendering pipeline
    # "pymeshlab", # Use by `Mesh.remesh`, which is involve in `PBDTetEntity.sample`
    # "pycollada", # Optional `trimesh` dependency for loading `.dae` mesh files
    # "pygltflib == 1.16.0", # Used for parsing `.glb` mesh files
    # "usd-core",  # Used for parsing `.usd` mesh files
    # "tetgen >= 0.6.4", # Use by `PBD3DEntity.sample` to tetrahedralize a mesh
    # "PyGEL3D", # Used for some advanced mesh processing such as `skeletonization`
    # "scikit-image", # Use by `RigidGeom.visualize_sdf` to render SDF as level 0 marching cubes
    # "coacd", # Convex decomposition library
    # "rtree", # Ray casting used in mesh to height field conversion
    # # Constraint Satisfaction Solver.
    # "z3-solver", # Used to compute contype and conaffinity bitmasks from complete list of excluded collision pairs.
    # "OpenEXR", # Used for loading raytracing special texture images
    # "fast_simplification>=0.1.12", # Used for mesh simplification
    # "pysplashsurf",  # Surface reconstruction library for particle data from SPH simulations

]

[project.optional-dependencies]
dev = [
	"black",
    "pytest",
]

[project.urls]
Homepage = "https://github.com/yourname/paper-plot"
Issues = "https://github.com/yourname/paper-plot/issues"

[tool.hatch.build.targets.wheel]
packages = ["ppplt"]

# Ensure non-Python assets are included inside the installed wheel under ppplt/
# Without moving files in the repo, we place them into ppplt/ at build time for reliable runtime access.
[tool.hatch.build.targets.wheel.force-include]
"styles" = "ppplt/styles"
"fonts" = "ppplt/fonts"

[tool.hatch.envs.default]
type = "virtual"

[tool.hatch.envs.dev]
dependencies = [
	"pytest",
]

[tool.pytest.ini_options]
addopts = "-q"
testpaths = ["tests"]
